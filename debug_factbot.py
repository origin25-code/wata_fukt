import os
import openai
from telegram import Bot
from datetime import datetime

# === –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
DEBUG_CHAT_ID = os.getenv("DEBUG_CHAT_ID", TELEGRAM_CHAT_ID)

# === –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
def validate_env():
    missing = []
    for key, val in {
        "OPENAI_API_KEY": OPENAI_API_KEY,
        "TELEGRAM_BOT_TOKEN": TELEGRAM_TOKEN,
        "TELEGRAM_CHAT_ID": TELEGRAM_CHAT_ID
    }.items():
        if not val:
            missing.append(key)
    if missing:
        raise Exception(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")

# === –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–ú–ü–¢–ê ===
def load_prompt():
    try:
        with open("fact_prompt.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except Exception as e:
        raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å prompt: {e}")

# === –ó–ê–ü–†–û–° –ö OPENAI ===
def generate_fact(prompt: str):
    openai.api_key = OPENAI_API_KEY
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–∫—Ç–æ–≤"},
                {"role": "user", "content": prompt}
            ],
            temperature=1.0,
            timeout=30
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–∞: {e}")

# === –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –í TELEGRAM ===
def send_to_telegram(text, chat_id=TELEGRAM_CHAT_ID):
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {e}")

# === –û–°–ù–û–í–ù–ê–Ø –¢–û–ß–ö–ê –ó–ê–ü–£–°–ö–ê ===
def main():
    try:
        validate_env()
        send_to_telegram("üîß factbot —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª", DEBUG_CHAT_ID)

        prompt = load_prompt()
        send_to_telegram("üìÑ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω", DEBUG_CHAT_ID)

        fact = generate_fact(prompt)
        send_to_telegram("üß† –§–∞–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", DEBUG_CHAT_ID)

        send_to_telegram(fact, TELEGRAM_CHAT_ID)
        send_to_telegram("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", DEBUG_CHAT_ID)
        print(f"\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª:\n{fact}\n")

    except Exception as e:
        error_msg = f"‚ùå Fallback: {e}"
        print(error_msg)
        try:
            send_to_telegram(error_msg, DEBUG_CHAT_ID)
        except:
            pass

if __name__ == "__main__":
    main()
